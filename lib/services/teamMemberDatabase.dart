import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:piper_team_tasks/models/task.dart';

class StudentDatabaseService {
  // ID of the student as generated by Firestore
  final String uid;
  StudentDatabaseService({this.uid});

  // collection references
  final CollectionReference teamMemberCollection =
      Firestore.instance.collection('TeamMember');

  final CollectionReference supervisorCollection =
      Firestore.instance.collection('Supervisor');

  final CollectionReference userCollection =
      Firestore.instance.collection('User');

  Future<void> createStudent(uid, name, age) async {
    await teamMemberCollection
        .document(uid)
        .setData({'name': '$name', 'age': '$age', 'supervisor': ""});

    // create the latest collection with dummy data
    await teamMemberCollection
        .document(uid)
        .collection('Latest')
        .document('placeholder')
        .setData({
      'taskType': 1,
      'dateCreated': DateTime(2017, 9, 7, 17, 30),
      'deadline': DateTime(2017, 9, 7, 17, 30),
      'feedback': "Placeholder Feedback",
      'grade': "Excellent",
      'status': false,
      'task': "Placeholder task",
    });

    // create the tasks collection with dummy data
    await teamMemberCollection
        .document(uid)
        .collection('Tasks')
        .document('placeholder')
        .setData({
      'taskType': 1,
      'dateCreated': DateTime(2017, 9, 7, 17, 30),
      'deadline': DateTime(2017, 9, 7, 17, 30),
      'feedback': "Placeholder Feedback",
      'grade': "Excellent",
      'status': false,
      'task': "Placeholder Task",
    });
    // Create plans collection with dummy data
    await teamMemberCollection
        .document(uid)
        .collection('Plan')
        .document('placeholder')
        .setData({
      'planType': "placeholder",
      'dateCreated': DateTime(2017, 9, 7, 17, 30),
      'dateEnding': DateTime(2017, 9, 7, 17, 30),
      'dateStarting': DateTime(2017, 9, 7, 17, 30),
      'plan': "Placeholder plan",
      'progress': 0.5,
      'status': true,
      'from': "",
      'to': ''
    });
  }

  // Adds the name of the newly created Team member to the User Document
  Future<void> addTeamMemberUserToSimpleUser(String uid, String name) async {
    return await userCollection.document(uid).updateData({'teamMember': name});
  }

  // Add the new team member to new team (add the id of the supervisor to teamMember field of supervisor)
  Future<void> addTeamMembersTeam(
      String supervisorID, String teamMemberID) async {
    return await teamMemberCollection
        .document(teamMemberID)
        .updateData({'supervisor': supervisorID});
  }

  Stream<DocumentSnapshot> getTeamMemberDoc(String userID) {
    var document = teamMemberCollection.document(userID);
    return document.snapshots();
  }

  Future<void> addTeamMemberToTeam(
      teamMemberID, teamMemberName, pastedValue) async {
    await supervisorCollection
        .document(pastedValue)
        .collection('Team')
        .document(teamMemberID)
        .setData({
      'name': '$teamMemberName',
      'teamMemberID': teamMemberID,
    });
  }

  // Method that updates the team member's plan
  Future<void> updatePlan(String teamMemberID, String fromPlan, String toPlan,
      DateTime fromDate, DateTime toDate, String planType) async {
    CollectionReference planCollection =
        Firestore.instance.collection('TeamMember/$teamMemberID/Plan');

    return await planCollection.document('$planType').setData({
      'dateCreated': fromDate,
      'dateEnding': toDate,
      'dateStarting': fromDate,
      'planType': planType,
      'from': fromPlan,
      'to': toPlan,
      'plan': "",
      'progress': 0.0,
      'status': true
    });
  }

  // Function to add a new plan for the given teamMember

  Future<void> addPlan(String teamMember, String fromPlan, String toPlan,
      DateTime fromDate, DateTime toDate, String planType) async {
    CollectionReference planCollection =
        Firestore.instance.collection('TeamMember/$teamMember/Plan');

    return await planCollection.document('$planType').setData({
      'dateCreated': fromDate,
      'dateEnding': toDate,
      'dateStarting': fromDate,
      'planType': planType,
      'from': fromPlan,
      'plan': "",
      'progress': 0.0,
      'status': true,
      'to': toPlan,
    });
  }

  // Function to delete the plan for a given team member based on planType
  Future<void> deletePlan(String teamMemberID, String planType) async {
    CollectionReference planCollection =
        Firestore.instance.collection('TeamMember/$teamMemberID/Plan');
    planCollection.document(planType).delete();
    int pType = 1;
    if (planType == "Memorization") {
      pType = 1;
    } else if (planType == "Revision") {
      pType = 2;
    } else {
      pType = 3;
    }
    await Firestore.instance
        .collection('TeamMember/$teamMemberID/Tasks')
        .getDocuments()
        .then((onValue) {
      for (var doc in onValue.documents) {
        if (doc.data['feedback'] != "Placeholder Feedback" &&
            doc.data['assignmentType'] == pType) doc.reference.delete();
      }
    });
  }

  // When the team member is removed from a team or leaves a team
  Future<void> teamMemberLeavesSection(
      String teamMemberID, String supervisorID) async {
    // Go to TeamMember/teamMember/Plan and delete all documents
    await Firestore.instance
        .collection('TeamMember/$teamMemberID/Plan')
        .getDocuments()
        .then((onValue) {
      for (var doc in onValue.documents) {
        if (doc.data['plan'] != "Placeholder plan") doc.reference.delete();
      }
    });
    // Go to TeamMember/teamMember/Tasks and delete all documents
    await Firestore.instance
        .collection('TeamMember/$teamMemberID/Tasks')
        .getDocuments()
        .then((onValue) {
      for (var doc in onValue.documents) {
        if (doc.data['feedback'] != "Placeholder Feedback")
          doc.reference.delete();
      }
    });
    // Go to TeamMember/teamMember/Latest and delete all documents
    await Firestore.instance
        .collection('TeamMember/$teamMemberID/Latest')
        .getDocuments()
        .then((onValue) {
      for (var doc in onValue.documents) {
        if (doc.data['feedback'] != "Placeholder Feedback")
          doc.reference.delete();
      }
    });
    // Go to TeamMember/teamMember and update the field of team to ""
    await teamMemberCollection
        .document(teamMemberID)
        .updateData({'supervisor': ""});

    // Go to Supervisor/supervisorID/team and delete the document
    Firestore.instance
        .collection("Supervisor")
        .document(supervisorID)
        .collection("team")
        .document(teamMemberID)
        .delete();
  }

  Future<void> addTasksFromPlan(studentID, List<Task> assignments) async {
    CollectionReference planCollection =
        teamMemberCollection.document('$studentID').collection('Tasks');

    for (Task assignment in assignments) {
      planCollection.document().setData({
        'assignmentType': assignment.taskType ?? 1,
        'dateCreated': assignment.dateCreated ?? DateTime.now(),
        'deadline': assignment.deadline ?? DateTime.now(),
        'feedback': "",
        'grade': assignment.grade ?? "Ungraded",
        'status': assignment.status ?? false,
        'task': assignment.task ?? "some task",
      });
    }
  }
}
