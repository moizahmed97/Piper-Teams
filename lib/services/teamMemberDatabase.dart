import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:piper_team_tasks/models/task.dart';

class TeamMemberDatabaseService {
  // ID of the team member as generated by Firestore
  final String uid;
  TeamMemberDatabaseService({this.uid});

  // collection references
  final CollectionReference teamMemberCollection =
      Firestore.instance.collection('TeamMember');

  final CollectionReference supervisorCollection =
      Firestore.instance.collection('Supervisor');

  final CollectionReference userCollection =
      Firestore.instance.collection('User');

  Future<void> createMember(uid, name, age) async {
    await teamMemberCollection
        .document(uid)
        .setData({'name': '$name', 'age': '$age', 'supervisor': ""});

    // create the tasks collection with dummy data
    await teamMemberCollection
        .document(uid)
        .collection('Tasks')
        .document('placeholder')
        .setData({
      'taskType': 1,
      'dateCreated': DateTime(2017, 9, 7, 17, 30),
      'deadline': DateTime(2017, 9, 7, 17, 30),
      'feedback': "Placeholder Feedback",
      'taskID': " ",
      'status': false,
      'task': "Placeholder Task",
    });
    // Create plans collection with dummy data
    await teamMemberCollection
        .document(uid)
        .collection('Plan')
        .document('placeholder')
        .setData({
      'planType': "placeholder",
      'dateCreated': DateTime(2017, 9, 7, 17, 30),
      'dateEnding': DateTime(2017, 9, 7, 17, 30),
      'dateStarting': DateTime(2017, 9, 7, 17, 30),
      'plan': "Placeholder plan",
      'progress': 0.5,
      'status': true,
    });
  }

  // Adds the name of the newly created Team member to the User Document
  Future<void> addTeamMemberUserToSimpleUser(String uid, String name) async {
    return await userCollection.document(uid).updateData({'teamMember': name});
  }

  // Add the new team member to new team (add the id of the supervisor to teamMember field of supervisor)
  Future<void> addTeamMembersTeam(
      String supervisorID, String teamMemberID) async {
    return await teamMemberCollection
        .document(teamMemberID)
        .updateData({'supervisor': supervisorID});
  }

  Stream<DocumentSnapshot> getTeamMemberDoc(String userID) {
    var document = teamMemberCollection.document(userID);
    return document.snapshots();
  }

  Future<bool> checkIfTeamExists(String pastedValue) async {
    bool exists = false;
    try {
      await supervisorCollection.document(pastedValue).get().then((doc) {
        if (doc.exists)
          exists = true;
        else
          exists = false;
      });
      return exists;
    } catch (e) {
      return false;
    }
  }

  Future<void> addTeamMemberToTeam(
      teamMemberID, teamMemberName, pastedValue) async {
    await supervisorCollection
        .document(pastedValue)
        .collection('Team')
        .document(teamMemberID)
        .setData({
      'name': '$teamMemberName',
      'teamMemberID': teamMemberID,
    });
  }

  // Method that updates the team member's plan
  Future<void> updatePlan(String teamMemberID, String fromPlan,
      DateTime fromDate, DateTime toDate, String planType) async {
    CollectionReference planCollection =
        Firestore.instance.collection('TeamMember/$teamMemberID/Plan');

    return await planCollection.document('$planType').setData({
      'dateCreated': fromDate,
      'dateEnding': toDate,
      'dateStarting': fromDate,
      'planType': planType,
      'plan': fromPlan,
      'progress': 0.0,
      'status': true
    });
  }

  // Function to add a new plan for the given teamMember

  Future<void> addPlan(String teamMember, String fromPlan, DateTime fromDate,
      DateTime toDate, String planType) async {
    CollectionReference planCollection =
        Firestore.instance.collection('TeamMember/$teamMember/Plan');

    return await planCollection.document('$planType').setData({
      'dateCreated': fromDate,
      'dateEnding': toDate,
      'dateStarting': fromDate,
      'planType': planType,
      'plan': fromPlan,
      'progress': 0.0,
      'status': true,
    });
  }

  // Function to delete the plan for a given team member based on planType
  Future<void> deletePlan(String teamMemberID, String planType) async {
    CollectionReference planCollection =
        Firestore.instance.collection('TeamMember/$teamMemberID/Plan');
    planCollection.document(planType).delete();
  }

  // When the team member is removed from a team or leaves a team
  Future<void> teamMemberLeavesSection(
      String teamMemberID, String supervisorID) async {
    // Go to TeamMember/teamMember/Plan and delete all documents
    await Firestore.instance
        .collection('TeamMember/$teamMemberID/Plan')
        .getDocuments()
        .then((onValue) {
      for (var doc in onValue.documents) {
        if (doc.data['plan'] != "Placeholder plan") doc.reference.delete();
      }
    });
    // Go to TeamMember/teamMember/Tasks and delete all documents
    await Firestore.instance
        .collection('TeamMember/$teamMemberID/Tasks')
        .getDocuments()
        .then((onValue) {
      for (var doc in onValue.documents) {
        if (doc.data['feedback'] != "Placeholder Feedback")
          doc.reference.delete();
      }
    });

    // Go to TeamMember/teamMember and update the field of team to ""
    await teamMemberCollection
        .document(teamMemberID)
        .updateData({'supervisor': ""});

    // Go to Supervisor/supervisorID/team and delete the document
    Firestore.instance
        .collection("Supervisor")
        .document(supervisorID)
        .collection("Team")
        .document(teamMemberID)
        .delete();
  }



  // Function to delete the task for a given team member with given taskID
  Future<void> deleteTask(String teamMemberID, String taskID) async {
    CollectionReference tasksCollection =
        Firestore.instance.collection('TeamMember/$teamMemberID/Tasks');
    tasksCollection.document(taskID).delete();
  }

// Method that updates the progress of plan from the team member view
  Future<void> updatePlanProgress(
      String teamMemberID, String planType, double progress) async {
    CollectionReference plansCollection =
        Firestore.instance.collection('TeamMember/$teamMemberID/Plan');
    double progressDble = progress / 100;
    plansCollection.document(planType).updateData({'progress': progressDble});
  }

  // Method to set Feedback of a task to completed
  Future<void> setFeedbackToCompleted(
      String teamMemberID, String taskID) async {
    CollectionReference tasksCollection =
        Firestore.instance.collection('TeamMember/$teamMemberID/Tasks');

    tasksCollection
        .document(taskID)
        .updateData({'feedback': "completed", 'status': true});
  }
}
